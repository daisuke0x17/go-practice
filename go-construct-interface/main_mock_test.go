// Code generated by MockGen. DO NOT EDIT.
// Source: main.go

// Package main is a generated GoMock package.
package main

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockDuck is a mock of Duck interface.
type MockDuck struct {
	ctrl     *gomock.Controller
	recorder *MockDuckMockRecorder
}

// MockDuckMockRecorder is the mock recorder for MockDuck.
type MockDuckMockRecorder struct {
	mock *MockDuck
}

// NewMockDuck creates a new mock instance.
func NewMockDuck(ctrl *gomock.Controller) *MockDuck {
	mock := &MockDuck{ctrl: ctrl}
	mock.recorder = &MockDuckMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDuck) EXPECT() *MockDuckMockRecorder {
	return m.recorder
}

// Quack mocks base method.
func (m *MockDuck) Quack() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Quack")
	ret0, _ := ret[0].(string)
	return ret0
}

// Quack indicates an expected call of Quack.
func (mr *MockDuckMockRecorder) Quack() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Quack", reflect.TypeOf((*MockDuck)(nil).Quack))
}

// MockFarmer is a mock of Farmer interface.
type MockFarmer struct {
	ctrl     *gomock.Controller
	recorder *MockFarmerMockRecorder
}

// MockFarmerMockRecorder is the mock recorder for MockFarmer.
type MockFarmerMockRecorder struct {
	mock *MockFarmer
}

// NewMockFarmer creates a new mock instance.
func NewMockFarmer(ctrl *gomock.Controller) *MockFarmer {
	mock := &MockFarmer{ctrl: ctrl}
	mock.recorder = &MockFarmerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFarmer) EXPECT() *MockFarmerMockRecorder {
	return m.recorder
}

// Breed mocks base method.
func (m *MockFarmer) Breed() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Breed")
	ret0, _ := ret[0].(string)
	return ret0
}

// Breed indicates an expected call of Breed.
func (mr *MockFarmerMockRecorder) Breed() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Breed", reflect.TypeOf((*MockFarmer)(nil).Breed))
}
